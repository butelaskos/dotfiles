if &compatible
  set nocompatible
end

" Shim command and function to allow migration from Vundle to vim-plug.
function! VundleToPlug(vundle_command, arg, ...)
  echom "You are using Vundle's `".a:vundle_command."` command to declare plugins. Dotfiles now uses vim-plug for plugin mangagement. Please rename uses of `".a:vundle_command."` to `Plug`. Plugin was '".a:arg."'."
  let vim_plug_options = {}

  if a:0 > 0
    if has_key(a:1, 'name')
      let name = a:1.name
      let vim_plug_options.dir = "$HOME/.vim/bundle/".a:1.name
    endif

    if has_key(a:1, 'rtp')
      let vim_plug_options.rtp = a:1.rtp
    endif
  endif

  Plug a:arg, vim_plug_options
endfunction

com! -nargs=+  -bar Plugin call VundleToPlug("Plugin", <args>)
com! -nargs=+  -bar Bundle call VundleToPlug("Bundle", <args>)

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'christoomey/vim-run-interactive' " Run interactive commands on Shell
Plug 'kchmck/vim-coffee-script'        " Coffe Script support for Vim
Plug 'ctrlpvim/ctrlp.vim'              " Quick search project files
" Plug 'wincent/Command-T'               " Quick search project files
Plug 'pbrisbin/vim-mkdir'              " Auto create dir when creating files
Plug 'scrooloose/syntastic'            " Syntax Check plugin
Plug 'slim-template/vim-slim'          " Syntax Highlighting
Plug 'tpope/vim-eunuch'                " File management on vim (Rename, Move, Remove, etc.)
Plug 'tpope/vim-fugitive'              " Git for vim
Plug 'tpope/vim-repeat'                " Enables . command after plugin map (used with surround)
Plug 'tpope/vim-surround'              " Ease surroundings with [ydc]s...
Plug 'vim-scripts/tComment'            " Standard vim comment
Plug 'tpope/vim-unimpaired'            " pairs of handy bracket mappings
Plug 'christoomey/vim-system-copy'     " System copy and paste (cp and cv)


" My Bundles
Plug 'altercation/vim-colors-solarized' " Enable Solarized colorscheme
Plug 'christoomey/vim-tmux-navigator'   " Seamless navigation between tmux and vim
Plug 'mattn/emmet-vim'                  " Expading abbreviations with Emmet
Plug 'scrooloose/nerdtree'              " File navigation panel on Vim
Plug 'honza/vim-snippets'               " Ultisnips snippets
Plug 'SirVer/ultisnips'                 " Snippets for vim with python support
Plug 'sickill/vim-pasta'                " Pasting with context indentation
Plug 'christoomey/vim-tmux-runner'      " Run from vim on Tmux panel
Plug 'vim-scripts/BufOnly.vim'          " Close all buffers but the current
Plug 'pangloss/vim-javascript'          " Improves javascrip on VIM (required by react)
Plug 'mxw/vim-jsx'                      " Syntax Highlight with React JSX
Plug 'kylef/apiblueprint.vim'           " Api Blueprint
Plug 'majutsushi/tagbar'                " Vim plugin that displays tags in a window, ordered by scope

" Ruby Bundles
Plug 'vim-ruby/vim-ruby'              " Ruby support on vim
Plug 'kana/vim-textobj-user'          " Create your own text objects (used by vim-textobj-rubyblock)
Plug 'nelstrom/vim-textobj-rubyblock' " Ruby text objects
Plug 'tpope/vim-rails'                " Rails support for vim
Plug 'thoughtbot/vim-rspec'           " Run RSpecs from vim
Plug 'tpope/vim-bundler'              " Support for bundler inside vim
Plug 'tpope/vim-endwise'              " Auto add end on class, module, def, etc.

Plug 'justinj/vim-react-snippets'     " React snippets

" Go Bundles
Plug 'fatih/vim-go'   " Go development plugin for Vim
Plug 'gevans/vim-ginkgo' " Ginkgo syntax highlight
" Plug 'jaisonerick/vim-gotest' " Go Testing plugin
Plug 'jaisonerick/vim-ginkgo-runner' " Ginkgo test plugin

" Python Bundles
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'


" PHP Bundles
" Plug 'arnaud-lb/vim-php-namespace'
" Plug 'tobyS/vmustache' " Dependency of tobyS/pdv
" Plug 'tobyS/pdv'

" Unused Bundles
" Plug 'Lokaltog/vim-easymotion'
" Plug 'rizzatti/dash.vim'

" Setup powerline to vim
" python import sys; sys.path.append("/usr/local/lib/python2.7/site-packages/")
" python from powerline.vim import setup as powerline_setup
" python powerline_setup()
" python del powerline_setup

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
